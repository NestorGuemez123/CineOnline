@model VideoOnDemand.Web.Models.ModificadoSerieViewModel
@using VideoOnDemand.Entities

@Scripts.Render("~/bundles/jqueryval")

@{
    ViewBag.Title = Model.Nombre.ToString();
}

<h2>Editar serie</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.MediaId)
        @Html.HiddenFor(model => model.FechaRegistro)
        @Html.HiddenFor(model => model.DuracionMin)

        <div class="form-group">
            @Html.LabelFor(model => model.Nombre, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Nombre, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Nombre, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Descripcion, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Descripcion, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Descripcion, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.FechaLanzamiento, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.FechaLanzamiento, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FechaLanzamiento, "", new { @class = "text-danger" })
            </div>
        </div>

        @{
            var selectedList = new SelectList(
                new List<SelectListItem> {
new SelectListItem { Text = "VISIBLE", Value = EEstatusMedia.VISIBLE.ToString()},
new SelectListItem { Text = "INVISIBLE", Value = EEstatusMedia.INVISIBLE.ToString()}
                }, "Value", "Text");
        }

        <div class="form-group">
            @Html.LabelFor(model => model.EstadosMedia, htmlAttributes: new { @class = "control-label col-md-2" })

            <div class="col-md-10">
                @Html.DropDownListFor(model => model.EstadosMedia, selectedList, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.EstadosMedia, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="row">
            <div class="col-md-6">
                <div class="panel panel-primary">
                    <div class="panel-heading">
                        <h3 class="panel-title">Actores</h3>
                    </div>
                    <div class="panel-body">
                        @foreach (var item in Model.ActoresDisponibles)
                        {
                            var seleccionado = "";

                            // Activar el checkbox si de los actores estan disponibles
                            // Existe en los temas seleccionados
                            if (Model.ActoresSeleccionados != null)
                            {
                                if (Model.ActoresSeleccionados.Contains(item.Id.Value))
                                {
                                    seleccionado = "checked";
                                }
                            }

                            <div class="checkbox checkbox-inline">
                                <label>
                                    <input class="actoresCheck" name="ActoresSeleccionados" type="checkbox" value="@item.Id.Value.ToString()" @seleccionado> @item.Name
                                </label>
                            </div>
                        }
                    </div>
                </div>
                <p class="text-danger" id="error-actores" hidden>Seleccione por lo menos un actor</p>
            </div>

            <div class="col-md-6">
                <div class="panel panel-primary">
                    <div class="panel-heading">
                        <h3 class="panel-title">Generos</h3>
                    </div>
                    <div class="panel-body">
                        @foreach (var item in Model.GenerosDisponibles)
                        {
                            var seleccionado = "";

                            // Activar el checkbox si de los generos estan disponibles
                            // Existe en los temas seleccionados
                            if (Model.GenerosSeleccionados != null)
                            {
                                if (Model.GenerosSeleccionados.Contains(item.GeneroId.Value))
                                {
                                    seleccionado = "checked";
                                }
                            }

                            <div class="checkbox checkbox-inline">
                                <label>
                                    <input class="generosCheck" name="GenerosSeleccionados" type="checkbox" value="@item.GeneroId.Value.ToString()" @seleccionado> @item.Nombre
                                </label>
                            </div>
                        }
                    </div>
                </div>
                <p class="text-danger" id="error-generos" hidden>Seleccione por lo menos un genero</p>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Guardar" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Regresar a la lista de series", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script type="text/javascript">
        var errorActores = $('#error-actores');
        var errorGeneros = $('#error-generos');
        $('form').submit(function () {
            //var isValid = $('.hobbycls').not(':checked') == 0;
            //if (!isValid) {
            //    errorActores.show(); // display error message
            //    return false; // prevent submit
            //}

            if ($(".actoresCheck:checkbox:checked").length > 0 && $(".generosCheck:checkbox:checked").length > 0) {
                errorActores.hide();
                errorGeneros.hide();
                return true;
            } else {
                if ($(".actoresCheck:checkbox:checked").length == 0) {
                    errorActores.show();
                }
                if ($(".generosCheck:checkbox:checked").length == 0) {
                    errorGeneros.show();
                }

                return false;
            }
        });

        $('.actoresCheck').change(function () {
            if ($(".actoresCheck:checkbox:checked").length > 0) {
                errorActores.hide(); // hide error message
            } else {
                errorActores.show();
            }
        });

        $('.generosCheck').change(function () {
            if ($(".generosCheck:checkbox:checked").length > 0) {
                errorGeneros.hide(); // hide error message
            } else {
                errorGeneros.show();
            }
        });
    </script>

}
